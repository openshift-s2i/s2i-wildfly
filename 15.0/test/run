#!/bin/bash -e
#
# The 'run' performs a simple test that verifies that S2I image.
# The main focus here is to excersise the S2I scripts.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
IMAGE_NAME=${IMAGE_NAME-openshift/wildfly-150-centos-candidate}

test_dir="$(readlink -zf $(dirname "${BASH_SOURCE[0]}"))"
image_dir=$(readlink -zf ${test_dir}/..)
cid_file=$(mktemp -u --suffix=.cid)

# Since we built the candidate image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--pull-policy=never"

# TODO: This should be part of the image metadata
test_port=8080

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  image_exists $(cat $cid_file)
}

container_ip() {
  docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat $cid_file)
}

run_s2i_build() {
  s2i build ${s2i_args} file://${test_dir}/test-app ${IMAGE_NAME} ${IMAGE_NAME}-testapp
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # TODO: S2I build require the application is a valid 'GIT' repository, we
  # should remove this restriction in the future when a file:// is used.
  pushd ${test_dir}/test-app >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit" || true
  popd >/dev/null
  run_s2i_build
}

run_test_application() {
  docker run --rm $1 --cidfile=${cid_file} ${IMAGE_NAME}-testapp >& /dev/null
}

cleanup() {
  if container_exists; then
    docker stop $(cat $cid_file)
    if [[ $1 != "0" ]]; then
      docker logs $(cat $cid_file)
    fi
  fi
  if image_exists ${IMAGE_NAME}-testapp; then
    docker rmi -f ${IMAGE_NAME}-testapp
  fi
  rm -rf ${test_dir}/test-app/.git
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    cleanup 1
    echo "S2I image '${IMAGE_NAME}' test FAILED (exit code: ${result})"
    exit $result
  fi
}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && [ -s $cid_file ] && break
    echo "Waiting for container start..."
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

run_test_usage() {
  s2i usage ${s2i_args} ${IMAGE_NAME} &>/dev/null
}

test_connection() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    echo "Sending GET request to http://$(container_ip):${test_port}/"
    set +e
    response_code=$(curl -s -w %{http_code} -o /dev/null http://$(container_ip):${test_port}/)
    status=$?
    set -e
    if [ $status -eq 0 ]; then
      if [ $response_code -eq 200 ]; then
        result=0
      fi
      break
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  return $result
}

test_config() {
  docker exec $(cat $cid_file) cat /wildfly/standalone/configuration/standalone.xml | grep auto-deploy-exploded=\"true\"
}

echo "Testing image $IMAGE_NAME"
# Build the application image twice to ensure the 'save-artifacts' and
# 'restore-artifacts' scripts are working properly
prepare

# TODO: The incremental build is currently broken for JBoss
# run_s2i_build
# check_result $?

# Verify the 'usage' script is working properly
run_test_usage
check_result $?

# Verify that the HTTP connection can be established to test application container
run_test_application "-e AUTO_DEPLOY_EXPLODED=true" &

# Wait for the container to write it's CID file
#
wait_for_cid

test_connection
check_result $?

test_config
check_result $?

cleanup 0
echo "Test SUCCESSFUL"
